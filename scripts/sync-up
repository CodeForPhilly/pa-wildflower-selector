#!/bin/bash

dbName=pa-wildflower-selector
projectName=pa-wildflower-selector

# Load environment variables if .env exists
if [ -f ../.env ]; then
    export $(cat ../.env | grep -v '^#' | xargs)
fi

# Check required environment variables
if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ] || [ -z "$LINODE_BUCKET_NAME" ]; then
    echo "Error: Missing required environment variables. Please check your .env file"
    echo "Required: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, LINODE_BUCKET_NAME"
    exit 1
fi

# Skip MongoDB dump in container since we're just syncing images
if [ ! -f /.dockerenv ]; then
    # If not in Docker, build and run the Docker container
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    
    echo "Building Docker image..."
    docker build -t sync-up-tool -f "$SCRIPT_DIR/sync-up.Dockerfile" "$SCRIPT_DIR"
    
    echo "Running sync in Docker container..."
    docker run --rm \
        -v "$(dirname "$SCRIPT_DIR")/images:/data/images:ro" \
        -e MONGODB_HOST="$MONGODB_HOST" \
        sync-up-tool
    exit $?
fi

echo "Syncing images to Linode Object Storage"
# Use AWS CLI directly since we're in the container
aws s3 sync /data/images/ s3://$LINODE_BUCKET_NAME/images/ \
    --endpoint-url ${LINODE_ENDPOINT_URL:-https://us-east-1.linodeobjects.com} \
    --acl public-read

echo "Sync completed"
echo "Images are now available at: https://$LINODE_BUCKET_NAME.${AWS_DEFAULT_REGION:-us-east-1}.linodeobjects.com/images/"
